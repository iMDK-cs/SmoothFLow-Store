

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  password  String
  role      String   @default("USER") // Changed from Role enum to String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders        Order[]
  reviews       Review[]
  sessions      Session[]
  accounts      Account[]
  cart          Cart?
  trackingUpdates OrderTracking[] @relation("TrackingUpdates")
  chatRooms     ChatRoom[] @relation("ChatRoomUser")
  adminChatRooms ChatRoom[] @relation("ChatRoomAdmin")
  chatMessages  ChatMessage[] @relation("ChatMessageSender")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  basePrice   Float
  category    String
  image       String?
  icon        String?
  color       String?
  popular     Boolean  @default(false)
  active      Boolean  @default(true)
  available   Boolean  @default(true)
  availabilityStatus String @default("available") // available, out_of_stock, discontinued, coming_soon
  stock       Int?
  availabilityUpdatedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  options     ServiceOption[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]

  @@map("services")
}

model ServiceOption {
  id          String  @id @default(cuid())
  serviceId   String
  title       String
  description String
  price       Float
  active      Boolean @default(true)

  service    Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("service_options")
}

model Order {
  id            String   @id @default(cuid())
  userId        String
  orderNumber   String   @unique
  status        String   @default("PENDING") // Changed from OrderStatus enum to String
  totalAmount   Float
  paymentStatus String   @default("PENDING") // Changed from PaymentStatus enum to String
  paymentMethod String?
  paymentId     String?
  notes         String?
  scheduledDate DateTime?
  
  // Paymob Integration Fields
  paymobOrderId     Int?     // Paymob order ID
  paymobPaymentKey  String?  // Payment key for iframe
  paymobTransactionId String? // Transaction ID from Paymob
  
  // Bank Transfer fields (temporarily commented out until migration)
  // bankTransferReceipt String? // Path to uploaded receipt file
  // bankTransferStatus  String? // PENDING_ADMIN_APPROVAL, APPROVED, REJECTED
  // adminNotes          String? // Admin notes for approval/rejection
  // adminApprovedBy     String? // Admin user ID who approved/rejected
  // adminApprovedAt     DateTime? // When admin approved/rejected
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user      User            @relation(fields: [userId], references: [id])
  items     OrderItem[]
  payments  Payment[]
  tracking  OrderTracking[]

  @@map("orders")
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  serviceId    String
  optionId     String?
  quantity     Int     @default(1)
  unitPrice    Float
  totalPrice   Float
  notes        String?

  order   Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service Service       @relation(fields: [serviceId], references: [id])
  option  ServiceOption? @relation(fields: [optionId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String   @id @default(cuid())
  orderId       String
  amount        Float
  currency      String   @default("SAR")
  status        String   @default("PENDING") // Changed from PaymentStatus enum to String
  method        String
  transactionId String?
  gateway       String
  gatewayData   Json?
  
  // Paymob specific fields
  paymobTransactionId String? // Paymob transaction ID
  paymobOrderId       Int?    // Paymob order ID
  paymobPaymentKey    String? // Payment key used
  paymobData          Json?   // Full Paymob response data
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  serviceId String
  orderId   String?
  rating    Int
  comment   String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@unique([userId, serviceId, orderId])
  @@map("reviews")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@index([userId]) // Index for faster user cart lookups
  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  serviceId String
  optionId  String?
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  service Service       @relation(fields: [serviceId], references: [id])
  option  ServiceOption? @relation(fields: [optionId], references: [id])

  @@unique([cartId, serviceId, optionId])
  @@index([cartId]) // Index for faster cart lookups
  @@index([serviceId]) // Index for faster service lookups
  @@index([optionId]) // Index for faster option lookups
  @@map("cart_items")
}

model Booking {
  id          String   @id @default(cuid())
  userId      String
  serviceId   String
  orderId     String?
  date        DateTime
  time        String
  status      String   @default("PENDING") // Changed from BookingStatus enum to String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bookings")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  type      String   // Changed from NotificationType enum to String
  title     String
  message   String
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())

  @@map("notifications")
}

model OrderTracking {
  id          String   @id @default(cuid())
  orderId     String
  status      String   // RECEIVED, CONFIRMED, IN_PROGRESS, TESTING, COMPLETED, DELIVERED
  title       String
  description String?
  notes       String?
  adminId     String
  timestamp   DateTime @default(now())

  // Relations
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  admin   User  @relation("TrackingUpdates", fields: [adminId], references: [id])

  @@map("order_tracking")
}

model ChatRoom {
  id        String   @id @default(cuid())
  userId    String
  adminId   String?
  status    String   @default("ACTIVE") // ACTIVE, CLOSED, ARCHIVED
  priority  String   @default("NORMAL") // LOW, NORMAL, HIGH, URGENT
  subject   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastMessageAt DateTime?

  // Relations
  user     User         @relation("ChatRoomUser", fields: [userId], references: [id], onDelete: Cascade)
  admin    User?        @relation("ChatRoomAdmin", fields: [adminId], references: [id])
  messages ChatMessage[]

  @@map("chat_rooms")
}

model ChatMessage {
  id        String   @id @default(cuid())
  roomId    String
  senderId  String
  message   String
  messageType String @default("TEXT") // TEXT, IMAGE, FILE, SYSTEM
  fileUrl   String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender User     @relation("ChatMessageSender", fields: [senderId], references: [id])

  @@map("chat_messages")
}


// Removed all enum declarations - using String instead