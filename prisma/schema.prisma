

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  password  String
  role      String   @default("USER") // Changed from Role enum to String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders    Order[]
  reviews   Review[]
  sessions  Session[]
  accounts  Account[]
  cart      Cart?
  supportTickets SupportTicket[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Service {
  id          String   @id @default(cuid())
  title       String
  description String
  basePrice   Float
  category    String
  image       String?
  icon        String?
  color       String?
  popular     Boolean  @default(false)
  active      Boolean  @default(true)
  available   Boolean  @default(true)
  stock       Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  options     ServiceOption[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  reviews     Review[]

  @@map("services")
}

model ServiceOption {
  id          String  @id @default(cuid())
  serviceId   String
  title       String
  description String
  price       Float
  active      Boolean @default(true)

  service    Service     @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  cartItems  CartItem[]

  @@map("service_options")
}

model Order {
  id            String   @id @default(cuid())
  userId        String
  orderNumber   String   @unique
  status        String   @default("PENDING") // Changed from OrderStatus enum to String
  totalAmount   Float
  paymentStatus String   @default("PENDING") // Changed from PaymentStatus enum to String
  paymentMethod String?
  paymentId     String?
  notes         String?
  scheduledDate DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  payments  Payment[]

  @@map("orders")
}

model OrderItem {
  id           String  @id @default(cuid())
  orderId      String
  serviceId    String
  optionId     String?
  quantity     Int     @default(1)
  unitPrice    Float
  totalPrice   Float
  notes        String?

  order   Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  service Service       @relation(fields: [serviceId], references: [id])
  option  ServiceOption? @relation(fields: [optionId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String   @id @default(cuid())
  orderId       String
  amount        Float
  currency      String   @default("SAR")
  status        String   @default("PENDING") // Changed from PaymentStatus enum to String
  method        String
  transactionId String?
  gateway       String
  gatewayData   Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  serviceId String
  orderId   String?
  rating    Int
  comment   String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@unique([userId, serviceId, orderId])
  @@map("reviews")
}

model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  serviceId String
  optionId  String?
  quantity  Int     @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart          @relation(fields: [cartId], references: [id], onDelete: Cascade)
  service Service       @relation(fields: [serviceId], references: [id])
  option  ServiceOption? @relation(fields: [optionId], references: [id])

  @@unique([cartId, serviceId, optionId])
  @@map("cart_items")
}

model Booking {
  id          String   @id @default(cuid())
  userId      String
  serviceId   String
  orderId     String?
  date        DateTime
  time        String
  status      String   @default("PENDING") // Changed from BookingStatus enum to String
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bookings")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  type      String   // Changed from NotificationType enum to String
  title     String
  message   String
  read      Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())

  @@map("notifications")
}

model SupportTicket {
  id        String   @id @default(cuid())
  userId    String
  subject   String
  message   String
  priority  String   @default("MEDIUM") // Changed from Priority enum to String
  status    String   @default("OPEN")   // Changed from TicketStatus enum to String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies   SupportReply[]

  @@map("support_tickets")
}

model SupportReply {
  id        String   @id @default(cuid())
  ticketId  String
  message   String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  ticket    SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("support_replies")
}

// Removed all enum declarations - using String instead